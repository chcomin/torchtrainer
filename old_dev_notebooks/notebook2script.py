'''
Script for transforming specific Jupyter notebook cells into python scripts.
Adapted from https://github.com/fastai/course-v3/blob/master/nbs/dl2/notebook2script.py
'''

import json,fire,re
from pathlib import Path
import io

def is_export(cell):
    '''Checks if first or second line of cell contains `#export`'''
    if cell['cell_type'] != 'code': return False
    src = cell['source']
    if len(src) == 0 or len(src)==1: return False
    
    for s in src[:2]:
        if re.match(r'^\s*#\s*export\s*', s, re.IGNORECASE) is not None:
            return True
    return False

def getSortedFiles(allFiles, upTo=None):
    '''Returns all the notebok files sorted by name.
       allFiles = True : returns all files
       upTo = None : no upper limit
            = filter : returns all files up to 'filter' included
       The sorting optioj is important to ensure that the notebok are executed in correct order.
    '''
    import glob
    ret = []
    if (allFiles==True): ret = glob.glob('*.ipynb') # Checks both that is bool type and that is True
    if (isinstance(allFiles,str)): ret = glob.glob(allFiles)
    if 0==len(ret): 
        print('WARNING: No files found')
        return ret
    if upTo is not None: ret = [f for f in ret if str(f)<=str(upTo)]
    return sorted(ret)

def iterateFolderPath(path):
    '''For path x/y/z, yields a list [x, x/y, x/y/z]'''
    
    dirs = path.parts
    parPath = Path('.')
    for dir in dirs:
        parPath = parPath/dir
        yield parPath
        
def createFolder(outFolder):
    
    outFolder = Path(outFolder)
    for folder in iterateFolderPath(outFolder):
        if not folder.exists(): folder.mkdir()

def notebook2script(fname=None, allFiles=None, upTo=None, outFolder=None):
    '''Finds cells starting with `#export` on first or second line and puts them into a new module
       + allFiles: convert all files in the folder
       + upTo: convert files up to specified one included
       + outFolder: output folder. If not given, creates a new folder with same name as the parent folder
       
       ES: 
       notebook2script --allFiles=True   # Parse all files
       notebook2script --allFiles=nb*   # Parse all files starting with nb*
       notebook2script --upTo=10   # Parse all files with (name<='10')
       notebook2script --allFiles=*_*.ipynb --upTo=10   # Parse all files with an '_' and (name<='10')
    '''
    # initial checks
    if (allFiles is None) and (upTo is not None): allFiles=True # Enable allFiles if upTo is present
    if (fname is None) and (not allFiles): print('Should provide a file name')
    if (outFolder is not None): createFolder(outFolder)
    if not allFiles: notebook2scriptSingle(fname, outFolder)
    else:
        print('Begin...')
        [notebook2scriptSingle(f, outFolder) for f in getSortedFiles(allFiles,upTo)]
        print('...End')
        
        
def notebook2scriptSingle(fname, outFolder=None):
    "Finds cells starting with `#export` and puts them into a new module"
    fname = Path(fname)
    #fname_out = f'nb_{fname.stem.split("_")[0]}.py'
    main_dic = json.load(open(fname,'r',encoding="utf-8"))
    code_cells = [c for c in main_dic['cells'] if is_export(c)]
    module_header = f'''
#################################################
### THIS FILE WAS AUTOGENERATED!              ###
#################################################
# Original notebook: '''

    notebook_full_path = fname.resolve()
    if outFolder is None:
        # Define output folder at ./ with same name as parent
        parent_folder = notebook_full_path.parent
        outFolder = parent_folder.stem

    outFolder = Path(outFolder)
    modules = {}
    for cell in code_cells: 
        cell_path_out = ''
        for s in cell['source'][:2]:
            m = re.match(r'(^\s*#\s*export\s*)(\S*)', s, re.IGNORECASE)
            if m is not None:
                cell_path_out = m.group(2)

        if cell_path_out=='':
            print('Output filename not found, ignoring cell')
            continue

        module_code = ''.join(cell['source'][2:]) + '\n\n'
        # remove trailing spaces
        module_code = re.sub(r' +$', '', module_code, flags=re.MULTILINE)
        if cell_path_out in modules:
            modules[cell_path_out] += module_code
        else:
            modules[cell_path_out] = module_code

    #import pdb;pdb.set_trace()

    for cell_path_out in modules:
        path_out = outFolder/cell_path_out       # cell_path_out may contain nested directories (ex: x/y/file.py)
        createFolder(path_out.parent)

        rel_notebook_path = Path('../'*(len(path_out.parts)-1))/fname
        module_code = f'{module_header}{rel_notebook_path}\n{modules[cell_path_out][:-2]}'
        with io.open(path_out, "w", encoding="utf-8") as f:
            f.write(module_code)
        print(f"Converted {Path(cell_path_out).as_posix()} to {path_out.as_posix()}")

if __name__ == '__main__': fire.Fire(notebook2script)

